public class SudokuSolver {
    public static boolean solve(int[][] board, int row, int col) {
        if (row == 9) return true;
        if (col == 9) return solve(board, row + 1, 0);
        if (board[row][col] != 0) return solve(board, row, col + 1);

        for (int num = 1; num <= 9; num++) {
            if (isValid(board, row, col, num)) {
                board[row][col] = num;
                if (solve(board, row, col + 1)) return true;
                board[row][col] = 0;
            }
        }
        return false;
    }

    public static boolean isValid(int[][] board, int r, int c, int num) {
        for (int i = 0; i < 9; i++)
            if (board[r][i] == num || board[i][c] == num ||
                board[3 * (r / 3) + i / 3][3 * (c / 3) + i % 3] == num)
                return false;
        return true;
    }

    public static void printBoard(int[][] board) {
        for (int[] row : board) {
            for (int n : row) System.out.print(n + " ");
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] board = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        if (solve(board, 0, 0)) printBoard(board);
        else System.out.println("No solution exists.");
    }
}
